{"ast":null,"code":"var _jsxFileName = \"/home/murali/react_node/gsuite-0365/react/src/pro/Test.js\";\nimport React from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport { BootstrapTable, TableHeaderColumn } from 'bootstrap-table';\nconst jobTypes = ['A', 'B', 'C', 'D'];\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true\n}; // validator function pass the user input value and row object. In addition, a bool return value is expected\n\nfunction jobNameValidator(value, row) {\n  const response = {\n    isValid: true,\n    notification: {\n      type: 'success',\n      msg: '',\n      title: ''\n    }\n  };\n\n  if (!value) {\n    response.isValid = false;\n    response.notification.type = 'error';\n    response.notification.msg = 'Value must be inserted';\n    response.notification.title = 'Requested Value';\n  } else if (value.length < 10) {\n    response.isValid = false;\n    response.notification.type = 'error';\n    response.notification.msg = 'Value must have 10+ characters';\n    response.notification.title = 'Invalid Value';\n  }\n\n  return response;\n}\n\nfunction jobStatusValidator(value, row) {\n  const nan = isNaN(parseInt(value, 10));\n\n  if (nan) {\n    return 'Job Status must be a integer!';\n  }\n\n  return true;\n}\n\nclass EditTypeTable extends React.Component {\n  render() {\n    return React.createElement(BootstrapTable, {\n      data: jobs,\n      cellEdit: cellEditProp,\n      insertRow: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(TableHeaderColumn, {\n      dataField: \"id\",\n      isKey: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Job ID\"), React.createElement(TableHeaderColumn, {\n      dataField: \"status\",\n      editable: {\n        validator: jobStatusValidator\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Job Status\"), React.createElement(TableHeaderColumn, {\n      dataField: \"name\",\n      editable: {\n        type: 'textarea',\n        validator: jobNameValidator\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Job Name\"), React.createElement(TableHeaderColumn, {\n      dataField: \"type\",\n      editable: {\n        type: 'select',\n        options: {\n          values: jobTypes\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Job Type\"), React.createElement(TableHeaderColumn, {\n      dataField: \"active\",\n      editable: {\n        type: 'checkbox',\n        options: {\n          values: 'Y:N'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Active\"));\n  }\n\n}\n\nexport default Test;","map":{"version":3,"sources":["/home/murali/react_node/gsuite-0365/react/src/pro/Test.js"],"names":["React","MDBDataTable","BootstrapTable","TableHeaderColumn","jobTypes","cellEditProp","mode","blurToSave","jobNameValidator","value","row","response","isValid","notification","type","msg","title","length","jobStatusValidator","nan","isNaN","parseInt","EditTypeTable","Component","render","jobs","validator","options","values","Test"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport {BootstrapTable,TableHeaderColumn} from 'bootstrap-table';\nconst jobTypes = [ 'A', 'B', 'C', 'D' ];\n\nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true\n};\n\n// validator function pass the user input value and row object. In addition, a bool return value is expected\nfunction jobNameValidator(value, row) {\n  const response = { isValid: true, notification: { type: 'success', msg: '', title: '' } };\n  if (!value) {\n    response.isValid = false;\n    response.notification.type = 'error';\n    response.notification.msg = 'Value must be inserted';\n    response.notification.title = 'Requested Value';\n  } else if (value.length < 10) {\n    response.isValid = false;\n    response.notification.type = 'error';\n    response.notification.msg = 'Value must have 10+ characters';\n    response.notification.title = 'Invalid Value';\n  }\n  return response;\n}\n\nfunction jobStatusValidator(value, row) {\n  const nan = isNaN(parseInt(value, 10));\n  if (nan) {\n    return 'Job Status must be a integer!';\n  }\n  return true;\n}\n\nclass EditTypeTable extends React.Component {\n  render() {\n    return (\n      <BootstrapTable data={ jobs } cellEdit={ cellEditProp } insertRow={ true }>\n          <TableHeaderColumn dataField='id' isKey={ true }>Job ID</TableHeaderColumn>\n          <TableHeaderColumn dataField='status' editable={ { validator: jobStatusValidator } }>Job Status</TableHeaderColumn>\n          <TableHeaderColumn dataField='name' editable={ { type: 'textarea', validator: jobNameValidator } }>Job Name</TableHeaderColumn>\n          <TableHeaderColumn dataField='type' editable={ { type: 'select', options: { values: jobTypes } } }>Job Type</TableHeaderColumn>\n          <TableHeaderColumn dataField='active' editable={ { type: 'checkbox', options: { values: 'Y:N' } } }>Active</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n\nexport default Test;"]},"metadata":{},"sourceType":"module"}